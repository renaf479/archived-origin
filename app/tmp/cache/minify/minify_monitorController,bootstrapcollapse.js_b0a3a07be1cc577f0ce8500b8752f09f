'use strict';var monitorCtrl=function($scope,Monitor){$scope.monitorObj={};$scope.monitor_filter={};$scope.monitor_totals={};$scope.monitor_list={};$scope.monitor={};Monitor.get('list').then(function(data){$scope.monitor_filter=data.filter;$scope.monitor_totals=data.total;$scope.monitor_list=data.data;$scope.monitor_title='Event Category';});Monitor.get('visits').then(function(data){$scope.monitor_visits=data.visits;});$scope.getData=function(){$scope.monitorObj.category=($scope.monitorObj.category==''?'undefined':$scope.monitorObj.category);Monitor.get('list/'+$scope.monitorObj.start_date+'/'+$scope.monitorObj.end_date+'/'+$scope.monitorObj.category).then(function(data){$scope.monitorObj.category=($scope.monitorObj.category=='undefined'?'':$scope.monitorObj.category);$scope.refreshMonitor(data);});}
$scope.parseDate=function(date){var d=new Date(date);var month=d.getMonth()+1;var day=d.getDate();var year=d.getFullYear();if(month<10)month='0'+month;if(day<10)day='0'+day;return year+'-'+month+'-'+day;}
$scope.exportData=function(){$scope.monitor.route='monitorExport';$scope.monitor.type='multiple';$scope.monitor.monitor_filter=$scope.monitor_filter;$scope.monitor.monitor_totals=$scope.monitor_totals;$scope.monitor.monitor_list=$scope.monitor_list;Monitor.post($scope.monitor).then(function(response){});}
$scope.refreshMonitor=function(data){$scope.monitor_list=data.data;$scope.monitor_filter=data.filter;$scope.monitor_totals=data.total;$scope.monitorObj.start_date=data.filter.startDate;$scope.monitorObj.end_date=data.filter.endDate;console.log($scope.monitor_list);Monitor.get('visits/'+$scope.monitorObj.start_date+'/'+$scope.monitorObj.end_date+'/'+$scope.monitorObj.category).then(function(data){$scope.monitor_visits=data.visits;});}
$scope.categoryData=function(category){if($scope.monitor_title!='Event Action'){Monitor.get('event/'+category).then(function(data){$scope.monitorObj.category=category;console.log(data);$scope.refreshMonitor(data);$scope.monitor_title='Event Action';});}}};!function($){"use strict";var Collapse=function(element,options){this.$element=$(element)
this.options=$.extend({},$.fn.collapse.defaults,options)
if(this.options.parent){this.$parent=$(this.options.parent)}
this.options.toggle&&this.toggle()}
Collapse.prototype={constructor:Collapse,dimension:function(){var hasWidth=this.$element.hasClass('width')
return hasWidth?'width':'height'},show:function(){var dimension,scroll,actives,hasData
if(this.transitioning||this.$element.hasClass('in'))return
dimension=this.dimension()
scroll=$.camelCase(['scroll',dimension].join('-'))
actives=this.$parent&&this.$parent.find('> .accordion-group > .in')
if(actives&&actives.length){hasData=actives.data('collapse')
if(hasData&&hasData.transitioning)return
actives.collapse('hide')
hasData||actives.data('collapse',null)}
this.$element[dimension](0)
this.transition('addClass',$.Event('show'),'shown')
$.support.transition&&this.$element[dimension](this.$element[0][scroll])},hide:function(){var dimension
if(this.transitioning||!this.$element.hasClass('in'))return
dimension=this.dimension()
this.reset(this.$element[dimension]())
this.transition('removeClass',$.Event('hide'),'hidden')
this.$element[dimension](0)},reset:function(size){var dimension=this.dimension()
this.$element.removeClass('collapse')
[dimension](size||'auto')
[0].offsetWidth
this.$element[size!==null?'addClass':'removeClass']('collapse')
return this},transition:function(method,startEvent,completeEvent){var that=this,complete=function(){if(startEvent.type=='show')that.reset()
that.transitioning=0
that.$element.trigger(completeEvent)}
this.$element.trigger(startEvent)
if(startEvent.isDefaultPrevented())return
this.transitioning=1
this.$element[method]('in')
$.support.transition&&this.$element.hasClass('collapse')?this.$element.one($.support.transition.end,complete):complete()},toggle:function(){this[this.$element.hasClass('in')?'hide':'show']()}}
var old=$.fn.collapse
$.fn.collapse=function(option){return this.each(function(){var $this=$(this),data=$this.data('collapse'),options=$.extend({},$.fn.collapse.defaults,$this.data(),typeof option=='object'&&option)
if(!data)$this.data('collapse',(data=new Collapse(this,options)))
if(typeof option=='string')data[option]()})}
$.fn.collapse.defaults={toggle:true}
$.fn.collapse.Constructor=Collapse
$.fn.collapse.noConflict=function(){$.fn.collapse=old
return this}
$(document).on('click.collapse.data-api','[data-toggle=collapse]',function(e){var $this=$(this),href,target=$this.attr('data-target')||e.preventDefault()||(href=$this.attr('href'))&&href.replace(/.*(?=#[^\s]+$)/,''),option=$(target).data('collapse')?'toggle':$this.data()
$this[$(target).hasClass('in')?'addClass':'removeClass']('collapsed')
$(target).collapse(option)})}(window.jQuery);